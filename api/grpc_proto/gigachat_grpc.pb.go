// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.6.1
// source: gigachat.proto

package protocol

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ChatServiceClient is the client API for ChatService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ChatServiceClient interface {
	Chat(ctx context.Context, in *ChatRequest, opts ...grpc.CallOption) (*ChatResponse, error)
	ChatStream(ctx context.Context, in *ChatRequest, opts ...grpc.CallOption) (ChatService_ChatStreamClient, error)
}

type chatServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewChatServiceClient(cc grpc.ClientConnInterface) ChatServiceClient {
	return &chatServiceClient{cc}
}

func (c *chatServiceClient) Chat(ctx context.Context, in *ChatRequest, opts ...grpc.CallOption) (*ChatResponse, error) {
	out := new(ChatResponse)
	err := c.cc.Invoke(ctx, "/gigachat.v1.ChatService/Chat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceClient) ChatStream(ctx context.Context, in *ChatRequest, opts ...grpc.CallOption) (ChatService_ChatStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &ChatService_ServiceDesc.Streams[0], "/gigachat.v1.ChatService/ChatStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &chatServiceChatStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ChatService_ChatStreamClient interface {
	Recv() (*ChatResponse, error)
	grpc.ClientStream
}

type chatServiceChatStreamClient struct {
	grpc.ClientStream
}

func (x *chatServiceChatStreamClient) Recv() (*ChatResponse, error) {
	m := new(ChatResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ChatServiceServer is the server API for ChatService service.
// All implementations must embed UnimplementedChatServiceServer
// for forward compatibility
type ChatServiceServer interface {
	Chat(context.Context, *ChatRequest) (*ChatResponse, error)
	ChatStream(*ChatRequest, ChatService_ChatStreamServer) error
	mustEmbedUnimplementedChatServiceServer()
}

// UnimplementedChatServiceServer must be embedded to have forward compatible implementations.
type UnimplementedChatServiceServer struct {
}

func (UnimplementedChatServiceServer) Chat(context.Context, *ChatRequest) (*ChatResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Chat not implemented")
}
func (UnimplementedChatServiceServer) ChatStream(*ChatRequest, ChatService_ChatStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method ChatStream not implemented")
}
func (UnimplementedChatServiceServer) mustEmbedUnimplementedChatServiceServer() {}

// UnsafeChatServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ChatServiceServer will
// result in compilation errors.
type UnsafeChatServiceServer interface {
	mustEmbedUnimplementedChatServiceServer()
}

func RegisterChatServiceServer(s grpc.ServiceRegistrar, srv ChatServiceServer) {
	s.RegisterService(&ChatService_ServiceDesc, srv)
}

func _ChatService_Chat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).Chat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gigachat.v1.ChatService/Chat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).Chat(ctx, req.(*ChatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_ChatStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ChatRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ChatServiceServer).ChatStream(m, &chatServiceChatStreamServer{stream})
}

type ChatService_ChatStreamServer interface {
	Send(*ChatResponse) error
	grpc.ServerStream
}

type chatServiceChatStreamServer struct {
	grpc.ServerStream
}

func (x *chatServiceChatStreamServer) Send(m *ChatResponse) error {
	return x.ServerStream.SendMsg(m)
}

// ChatService_ServiceDesc is the grpc.ServiceDesc for ChatService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ChatService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gigachat.v1.ChatService",
	HandlerType: (*ChatServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Chat",
			Handler:    _ChatService_Chat_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ChatStream",
			Handler:       _ChatService_ChatStream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "gigachat.proto",
}

// ModelsServiceClient is the client API for ModelsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ModelsServiceClient interface {
	ListModels(ctx context.Context, in *ListModelsRequest, opts ...grpc.CallOption) (*ListModelsResponse, error)
	RetrieveModel(ctx context.Context, in *RetrieveModelRequest, opts ...grpc.CallOption) (*RetrieveModelResponse, error)
}

type modelsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewModelsServiceClient(cc grpc.ClientConnInterface) ModelsServiceClient {
	return &modelsServiceClient{cc}
}

func (c *modelsServiceClient) ListModels(ctx context.Context, in *ListModelsRequest, opts ...grpc.CallOption) (*ListModelsResponse, error) {
	out := new(ListModelsResponse)
	err := c.cc.Invoke(ctx, "/gigachat.v1.ModelsService/ListModels", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modelsServiceClient) RetrieveModel(ctx context.Context, in *RetrieveModelRequest, opts ...grpc.CallOption) (*RetrieveModelResponse, error) {
	out := new(RetrieveModelResponse)
	err := c.cc.Invoke(ctx, "/gigachat.v1.ModelsService/RetrieveModel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ModelsServiceServer is the server API for ModelsService service.
// All implementations must embed UnimplementedModelsServiceServer
// for forward compatibility
type ModelsServiceServer interface {
	ListModels(context.Context, *ListModelsRequest) (*ListModelsResponse, error)
	RetrieveModel(context.Context, *RetrieveModelRequest) (*RetrieveModelResponse, error)
	mustEmbedUnimplementedModelsServiceServer()
}

// UnimplementedModelsServiceServer must be embedded to have forward compatible implementations.
type UnimplementedModelsServiceServer struct {
}

func (UnimplementedModelsServiceServer) ListModels(context.Context, *ListModelsRequest) (*ListModelsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListModels not implemented")
}
func (UnimplementedModelsServiceServer) RetrieveModel(context.Context, *RetrieveModelRequest) (*RetrieveModelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RetrieveModel not implemented")
}
func (UnimplementedModelsServiceServer) mustEmbedUnimplementedModelsServiceServer() {}

// UnsafeModelsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ModelsServiceServer will
// result in compilation errors.
type UnsafeModelsServiceServer interface {
	mustEmbedUnimplementedModelsServiceServer()
}

func RegisterModelsServiceServer(s grpc.ServiceRegistrar, srv ModelsServiceServer) {
	s.RegisterService(&ModelsService_ServiceDesc, srv)
}

func _ModelsService_ListModels_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListModelsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelsServiceServer).ListModels(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gigachat.v1.ModelsService/ListModels",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelsServiceServer).ListModels(ctx, req.(*ListModelsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModelsService_RetrieveModel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RetrieveModelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelsServiceServer).RetrieveModel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gigachat.v1.ModelsService/RetrieveModel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelsServiceServer).RetrieveModel(ctx, req.(*RetrieveModelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ModelsService_ServiceDesc is the grpc.ServiceDesc for ModelsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ModelsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gigachat.v1.ModelsService",
	HandlerType: (*ModelsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListModels",
			Handler:    _ModelsService_ListModels_Handler,
		},
		{
			MethodName: "RetrieveModel",
			Handler:    _ModelsService_RetrieveModel_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "gigachat.proto",
}
